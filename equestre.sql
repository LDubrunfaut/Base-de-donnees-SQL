DROP TABLE PARTICIPE;
DROP TABLE RANG;
DROP TABLE JUGE;
DROP TABLE ACTIVITE;
DROP TABLE COMPETITION;
DROP TABLE CAVALIER;
DROP TABLE CENTRE;

CREATE TABLE CENTRE (
  idCentre SERIAL PRIMARY KEY,
  nomCentre VARCHAR(30) NOT NULL,
  villeCentre VARCHAR(30) NOT NULL,
  specialisation VARCHAR(30) DEFAULT 'Aucune'
);

CREATE TABLE CAVALIER (
  idCavalier SERIAL PRIMARY KEY,
  nomCavalier VARCHAR(30) NOT NULL,
  prenomCavalier VARCHAR(30) DEFAULT 'M ou Mme',
  ageCavalier INTEGER,
  nomCheval VARCHAR(30),
  idCentre INTEGER references CENTRE
);

CREATE TABLE COMPETITION(
  idCompetition SERIAL PRIMARY KEY,
  nomCompetition VARCHAR (30) NOT NULL,
  jourCompet DATE
);

CREATE TABLE ACTIVITE (
  idActivite INTEGER,
  nomActivite VARCHAR(10) NOT NULL,
  idCompetition INTEGER REFERENCES COMPETITION,
  PRIMARY KEY (idCompetition, idActivite)
);

CREATE TABLE JUGE (
  idJuge SERIAL PRIMARY KEY,
  nomJuge VARCHAR(30) NOT NULL,
  mdp VARCHAR(20) NOT NULL
);

CREATE TABLE RANG (
  idJuge INTEGER REFERENCES JUGE ON DELETE CASCADE,
  idActivite INTEGER ,
  idCompetition INTEGER,
  rang INTEGER NOT NULL,
  PRIMARY KEY(idJuge, idActivite, idCompetition),
  FOREIGN KEY(idCompetition, idActivite) REFERENCES ACTIVITE 
);

CREATE TABLE PARTICIPE (
  idCavalier INTEGER REFERENCES CAVALIER,
  idActivite INTEGER,
  idCompetition INTEGER,
  Note1 INTEGER NOT NULL,
  Note2 INTEGER DEFAULT NULL,
  Note3 INTEGER DEFAULT NULL,
  penalite INTEGER DEFAULT NULL,
  total INTEGER NOT NULL,
  PRIMARY KEY(idCavalier, idActivite, idCompetition),
  FOREIGN KEY(idCompetition, idActivite) REFERENCES ACTIVITE,
  CHECK ((Note2 IS NOT NULL AND Note3 IS NOT NULL AND penalite IS NULL) OR (Note2 IS NULL AND Note3 IS NULL))
);
